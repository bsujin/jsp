* EL, JSTL을 배우는 이유 : 표현식, 스크립틀릿을 얻어내기 위함
	==> JSP 파일을 최대한 태그처럼 보이게 하기 위함 
		(자바 코드를 걷어낸다) 

		
JSTL 태그 라이브러리 사용방법 지시자 <%@ %>
페이지 지시자 (include, page, taglib) 
	1. taglib 지시자를 선언
	- taglib : jstl을 사용하기 위해 지정
	- 사용방법
	<%@ taglib prefix="네임 스페이스" uri="사용하려고 하는 태그의 식별자" %>
	
	- uri : 외울 필요 없음, 개발자가 사용할 수 있는 어떤 태그가 있는 지 자동완성으로 알 수 있음
	- prefix : 패키지, 개발자가 마음대로 지정가능, 관습적으로 많이 사용하는 prefix를 보통 따름 

CORE tag 라이브러리 : c
국제와 태그 라이브러리 : fmt

속성저장
request.setAttribute("속성명", 속성값);
request.setAttribute("속성명", 속성값);


el 사용시 null값 처리를 자동으로 함 ==> registUser.jsp null 처리 간소화 작업

바꿔보기 (ctrl + h)
<%=request.getContextPath() %> ==> ${pageContext.request.ContextPath } 

el에서 제공해주는 기본 객체 
${pageContext.}
${param.}
${속성명}   -> 가장 많이 사용 

${request.}  --> 사용x  **주의하기 **

JSTL core URL
import
include


JSTL CORE 조건 제어 (java if)
	if ==> java 단일 if ( 단일 이므로 if하나만 사용 **) 
			- if 사용시 test ==> test 속성에 검사할 조건식을 기술 
			** test 속성이 가장 많이 틀리므로 유의하기 
		  
		  1. test 속성 안에 조건을 기술 할 때는 EL식에 포함해서 작성을 해야한다
				${userid } == "brown" 	==> x 
				${userid } == 'brown' 	==> x 
				${userid == 'brown'}	==> o 
		
		  2. test 속성 안에 공백을 넣으면 정상적으로 판단되지 않음
		  		<c:if test="${userid == 'brown'} ">  ==> x 
		  		<c:if test="${userid == 'brown'}"> 	 ==> o 
		  		  
		  <%
		  		if( ((String)pageContext.getAttribute("userid")).equals("brown")){
		  			out.write((String)pageContext.getAttribute("userid"));
		  			}
		  %>
		  와 유사 
		  
		  
choose ==> java if, else if, else


****JSTL 반복문 (for, 향상된 for)   --> 중요, 가장 많이 사용 
	forEach
		
 - java에서는 향상된 for문에서는 인덱스 값을 사용하지 못하는데, 여기에서는 varStatus를 사용하여 가능하다
 	-> 하지만 begin, end는 안됨 

 	
JSTL core URL
import : 특정 url에서 반환하는 값(html)을 호출하는 곳에 추가하는 기능
redirect : 클라이언트에게 다른 url로 재전송 요청
url : url 경로 작성


FILTER
정의 : 요청을 처리할 servle, jsp로 요청이 전달되기 전에 사전에 먼저 요청을 받아 
공통적인 작업을 처리할 수 있는 객체 
1. 필터는 여러개 등록할 수 있다
	. 요청 - 필터1 - 필터 2 - ...... - 최종적으로 해당 요청을 처리할 servlet, jsp로 요청이 전달
		servlet, jsp에 의해 응답이 생성되면 거쳐온 필터의 역순으로 응답이 전달된다.
		servlet, jsp ==> 필터2 - 필터1  --- 최종 응답 전달
2. 필터 생성 방법
	. Filter 인터페이스 구현
		. 메소드 : init, destroy, doFilter
3. 필터 등록 방법
	. web.xml에 등록
	. @WebFilter
	
실습 : 요청 URI 통계 필터
	request.getRequestURI()  -- 메소드를 통해 해당 어떤 URI로 요청을 갔는지 확인
	Map<String, Integer> map;		-- key는 uri, 값은 요청횟수 
		/login.jsp , 5
		/paginUser, 15
	
	요청 통계자료를 담은 map 객체를 다른 servlet, jsp에서도 활용하려면?
		--> scope 객체에 넣어야하는데, application scope가 좋음 (여러개 있을 필요가 없다 ) 
			===> application scope에 저장하기 
	
					

